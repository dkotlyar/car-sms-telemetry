/*
 * utils.h
 *
 * Created: 30.05.2019 11:35:05
 * Author: dkotlyar
 */

#ifndef UTILS_H_
#define UTILS_H_

#define MIN(a,b) ((a) < (b) ? (a) : (b))
#define MAX(a,b) ((a) > (b) ? (a) : (b))
#define CLAMP(value,min,max) ((value)<(min) ? (min) : ((value)>(max) ? (max) : (value)))

typedef struct __ptimer__ {
	uint8_t in;		// Вход
	uint8_t q;		// Выход
	uint32_t start; // Задержка времени
} ptimer_t;

typedef struct __trig__ {
	uint8_t clk;	// Вход (прошлое значение)
    uint8_t qRise; // Восходящий уровень
    uint8_t qFall; // Нисходящий уровень
} ptrig_t;

/*
 * Процедура сброса программного таймера (таймера включения, таймера отключения, программного импульса)
 * Устанавливает входное и выходное значение в положение FALSE (отключает выход)
 */
void pTimerReset(ptimer_t * o);

/*
 * Программный таймер, реализует задержку включения с выдержкой не менее заданного в delay интервала времени в милисекундах
 * При подаче на вход in значения TRUE, на выходе появится значение TRUE через заданный в delay интервал времени
 * Задержка включения может превышать установленный интервал delay, и зависит от частоты вызова функции
 * Аналог функции TON (МЭК-61131)
 */
uint8_t pton(ptimer_t * o, uint8_t in, uint32_t delay);

/*
 * Программный таймер, реализует задержку отключения с выдержкой не менее заданного в delay интервала времени в милисекундах
 * При подаче на вход in значения FALSE, на выходе появится значение FALSE через заданный в delay интервал времени
 * Задержка отключения может превышать установленный интервал delay, и зависит от частоты вызова функции
 * Аналог функции TOF (МЭК-61131)
 */
uint8_t ptof(ptimer_t * o, uint8_t in, uint32_t delay);

/*
 * Программный импульс, реализует импульс длительностью не менее заданного в delay интервала времени в милисекундах
 * При подаче на вход in значения TRUE, на выходе появится значение TRUE мгновенно, а через заданный в delay интервал времени на выходе появится значение FALSE
 * Задержка отключения (длительность импульса) может превышать установленный интервал delay, и зависит от частоты вызова функции
 * Аналог функции TP (МЭК-61131)
 */
uint8_t ptp(ptimer_t * o, uint8_t in, uint32_t delay);

/*
 * Программный детектор фронта
 * Функциональный блок генерирует импульс по переднему фронту входного сигнала. 
 * Функция принимает значение FALSE до тех пор, пока вход CLK равен FALSE. Как только CLK получает значение TRUE, выход устанавливается в TRUE. 
 * При следующем вызове функционального блока выход сбрасывается в FALSE. Таким образом, блок выдает единичный импульс при каждом переходе CLK из FALSE в TRUE.
 * Аналог функции R_TRIG (МЭК-61131)
 */
uint8_t ptrigr(ptrig_t * t, uint8_t clk);

/*
 * Программный детектор спада
 * Функциональный блок генерирует импульс по заднему фронту входного сигнала.
 * Функция принимает значение FALSE до тех пор, пока вход CLK равен TRUE. Как только CLK получает значение FALSE, выход устанавливается в TRUE. 
 * При следующем вызове функционального блока выход сбрасывается в FALSE. Таким образом, блок выдает единичный импульс при каждом переходе CLK из TRUE в FALSE.
 * Аналог функции F_TRIG (МЭК-61131)
 */
uint8_t ptrigf(ptrig_t * t, uint8_t clk);

#endif /* UTILS_H_ */
